# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    jwt_secret: 'very-strong-secret' # TODO: get from environment
    user_microservice_rpc_uri: 'http://user.sts.app/rpc'
    user_microservice_x_rpc_auth_key: 'm6dKMgAdn4VHyPKyqCCssFxnFVAvmmW6RAg4hhG4K4cJhnG7qJYgQV3Vg3Q2' # TODO: get from environment
    mongodb_url: '%env(string:MONGODB_URL)%'
    mongodb_database: '%env(string:MONGODB_DATABASE)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Ticket\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    ########## INFRASTRUCTURE ##########

    GuzzleHttp\Client:
        class: 'GuzzleHttp\Client'

    MongoDB\Client:
        arguments:
            $uri: '%mongodb_url%'
            $uriOptions: { authSource: 'admin' }

    Ticket\Infrastructure\Event\EventListener\Symfony\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    Ticket\Infrastructure\Delivery\Api\Controller\CategoryController:
        public: true

    Ticket\Infrastructure\Delivery\Api\Controller\TicketController:
        public: true

    Ticket\Infrastructure\Delivery\Api\Controller\CommentController:
        public: true

    Ticket\Infrastructure\Delivery\Api\Authenticator\TokenService:
        class: Ticket\Infrastructure\Delivery\Api\Authenticator\JwtTokenService
        arguments:
            $secret: '%jwt_secret%'

    Ticket\Infrastructure\Delivery\Api\Authenticator\JwtProvider:
        arguments:
            $tokenService: '@Ticket\Infrastructure\Delivery\Api\Authenticator\TokenService'
        public: false

    Ticket\Infrastructure\Delivery\Api\Authenticator\JwtListener:
        arguments:
            $tokenService: '@Ticket\Infrastructure\Delivery\Api\Authenticator\TokenService'
        public: false

    Ticket\Infrastructure\Persistence\Doctrine\EventSubscriber\DoctrineDomainEventCollector:
        tags:
            - { name: doctrine.event_subscriber }

    Ticket\Infrastructure\Projection\Projector:
        calls:
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Category\CategoryCreatedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Category\CategoryNameChangedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Category\CategoryRemovedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Ticket\TicketCreatedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Ticket\TicketCategoryChangedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Ticket\TicketDescribedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Ticket\TicketTitleChangedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Ticket\TicketResolvedProjection'
            - method: register
              arguments:
                  - '@Ticket\Infrastructure\Projection\MongoDb\Ticket\TicketClosedProjection'

    Ticket\Infrastructure\Persistence\MongoDb\MongoDbClient:
        arguments:
            $client: '@MongoDB\Client'
            $database: '%mongodb_database%'

    ########## DOMAIN ##########

    Ticket\Domain\Category\CategoryRepository:
        class: Ticket\Infrastructure\Domain\Category\DoctrineCategoryRepository

    Ticket\Domain\Ticket\TicketRepository:
        class: Ticket\Infrastructure\Domain\Ticket\DoctrineTicketRepository

    Ticket\Domain\Comment\CommentRepository:
        class: Ticket\Infrastructure\Domain\Comment\DoctrineCommentRepository

    Ticket\Domain\Category\CategoryViewRepository:
        class: Ticket\Infrastructure\Domain\Category\MongoDbCategoryViewRepository

    Ticket\Domain\Event\EventStore:
        class: Ticket\Infrastructure\Domain\Event\DoctrineEventStore

    Ticket\Domain\Event\DomainEventDispatcher:
        calls:
            - method: subscribe
              arguments:
                  - '@Ticket\Infrastructure\Domain\Event\PersistDomainEventSubscriber'
            - method: subscribe
              arguments:
                  - '@Ticket\Infrastructure\Domain\Event\ProjectDomainEventSubscriber'

    ########## APPLICATION ##########

    Ticket\Shared\Application\QueryBus:
        class: Ticket\Shared\Infrastructure\Application\SimpleQueryBus
        calls:
            - method: map
              arguments:
                  - 'Ticket\Application\Query\GetCategories\GetCategoriesQuery'
                  - '@Ticket\Application\Query\GetCategories\GetCategoriesHandler'

    Ticket\Application\UseCase\CreateCategory\CreateCategoryHandler:
        class: Ticket\Application\UseCase\CreateCategory\CreateCategoryHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\CreateCategory\CreateCategoryCommand
            }

    Ticket\Application\UseCase\EditCategory\EditCategoryHandler:
        class: Ticket\Application\UseCase\EditCategory\EditCategoryHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\EditCategory\EditCategoryCommand
            }

    Ticket\Application\UseCase\CreateTicket\CreateTicketHandler:
        class: Ticket\Application\UseCase\CreateTicket\CreateTicketHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\CreateTicket\CreateTicketCommand
            }

    Ticket\Application\UseCase\EditTicket\EditTicketHandler:
        class: Ticket\Application\UseCase\EditTicket\EditTicketHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\EditTicket\EditTicketCommand
            }

    Ticket\Application\UseCase\CloseTicket\CloseTicketHandler:
        class: Ticket\Application\UseCase\CloseTicket\CloseTicketHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\CloseTicket\CloseTicketCommand
            }

    Ticket\Application\UseCase\ResolveTicket\ResolveTicketHandler:
        class: Ticket\Application\UseCase\ResolveTicket\ResolveTicketHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\ResolveTicket\ResolveTicketCommand
            }

    Ticket\Application\UseCase\AddComment\AddCommentHandler:
        class: Ticket\Application\UseCase\AddComment\AddCommentHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\AddComment\AddCommentCommand
            }

    Ticket\Application\UseCase\EditComment\EditCommentHandler:
        class: Ticket\Application\UseCase\EditComment\EditCommentHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\EditComment\EditCommentCommand
            }

    Ticket\Application\UseCase\RemoveComment\RemoveCommentHandler:
        class: Ticket\Application\UseCase\RemoveComment\RemoveCommentHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\RemoveComment\RemoveCommentCommand
            }

    Ticket\Application\UseCase\RemoveCategory\RemoveCategoryHandler:
        class: Ticket\Application\UseCase\RemoveCategory\RemoveCategoryHandler
        tags:
            - {
                name: tactician.handler,
                command: Ticket\Application\UseCase\RemoveCategory\RemoveCategoryCommand
            }